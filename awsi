#!/usr/bin/env python
'''
AWS Information Script - Dan P
Search for amazon instance by ID, Name tag or IP ip_address
The boto python library will look for credentials matching each profile in ~/.aws/credentials file
http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
'''
import sys
import boto.ec2
import re
import os
import ConfigParser
import pickle

profile = None
regions = None
cache_file = None


def print_line(k, v):
    print "{0}:\t{1}".format(k,v)


def get_instance_from(search_field, search_string):
    f = open(cache_file, "r")
    all_instances = pickle.load(f)
    f.close()

    instance = filter(lambda instance: instance[search_field] == search_string, all_instances)

    if not instance:
        print "Not Found. Consider running a refresh if you think this is a mistake"
        sys.exit(0)
    elif len(instance) > 1:
        print_multiple_warning(instance)
        sys.exit()
    else:
        return instance[0]

def print_multiple_warning(instances):
    print "More than one instance found, use a different field"
    for instance in instances:
        print_info(instance)

def print_info(instance):
    print ''
    print_line('Name', instance['name'])
    print_line('Acc', instance['acc'])
    print_line('AZ', instance['az'])
    print_line('ID', instance['id'])
    print_line('IP', instance['ip'])
    print_line('Type', instance['type'])
    print_line('State', instance['state'])
    print_line('Key', instance['key'])
    print_line('DNS', instance['dns'])
    print ''


def open_ssh_session(instance):
    if instance['state'] == 'running':
        try:
            raw_input('Press enter to continue...\n')
            os.system('ssh -o StrictHostKeyChecking=no -i ~/.ssh/{}.pem ec2-user@{}'.format(instance['key'], instance['ip']))
        except KeyboardInterrupt:
            print "Cancelled"


def print_usage():
    print "usage {} [refresh|i-12345|54.32.10.01|Live Web Server 01]".format(os.path.basename(__file__))


def load_config():
    global profiles
    global regions
    global cache_file

    config_file = '~/.awsi/config.cfg'

    if not os.path.exists(os.path.expanduser(config_file)):
        print "ERROR: missing config file " + config_file
        sys.exit(1)

    config = ConfigParser.ConfigParser()
    config.read(os.path.expanduser(config_file))
    regions = config.get('main','regions').split(',')
    profiles = config.get('main','profiles').split(',')
    cache_file = config.get('main','cache_file')


def refresh_cache():
    try:
        all_instances = []
        for profile in profiles:
            for region in regions:
                print "[re]caching {0} {1}".format(profile, region)
                conn = boto.ec2.connect_to_region(region, profile_name=profile)
                instances = [
                    instance
                    for reservations in conn.get_all_instances()
                    for instance in reservations.instances
                ]
                for instance in instances:
                    all_instances.append({
                        "id":instance.id,
                        "name": instance.tags.get('Name', None),
                        "ip":instance.ip_address,
                        "acc":profile,
                        "az":instance.placement,
                        "type":instance.instance_type,
                        "state":instance.state,
                        "key":instance.key_name,
                        "dns":instance.public_dns_name
                    })
                conn.close()

        f = open(cache_file, "w")
        pickle.dump(all_instances, f)
        f.close()
    except KeyboardInterrupt:
        print "Cancelled"


if __name__ == '__main__':

    arg = ' '.join(sys.argv[1:])
    
    ip_re = re.compile('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
    id_re = re.compile('^i-.{8}$')

    if not arg:
        print_usage()
        sys.exit()

    load_config()

    if os.path.basename(__file__) == 'awssh':
        __ssh_session = True

    if "refresh" == arg:
        refresh_cache()
        sys.exit()

    connect_to_instance = None

    if ip_re.match(arg):
        connect_to_instance = get_instance_from("ip", arg)
    elif id_re.match(arg):
        connect_to_instance = get_instance_from("id", arg)
    else:
        connect_to_instance = get_instance_from("name", arg)

    print_info(connect_to_instance)
    open_ssh_session(connect_to_instance)
